/**
 * Professional Flutterwave Payment Service
 * Following Flutterwave v4 API Documentation and Best Practices
 * Supports Card Payments, Mobile Money, and Bank Transfers
 */

// Flutterwave API Configuration
const FLUTTERWAVE_BASE_URL = "https://api.flutterwave.com/v3";
const FLUTTERWAVE_PUBLIC_KEY = process.env.REACT_APP_FLUTTERWAVE_PUBLIC_KEY;
const FLUTTERWAVE_ENCRYPTION_KEY = process.env.REACT_APP_FLUTTERWAVE_ENCRYPTION_KEY;

/**
 * Professional Flutterwave Service Class
 * Implements Flutterwave v4 API best practices with comprehensive error handling
 * Frontend implementation using Flutterwave Inline/Standard
 */
class FlutterwaveService {
  constructor() {
    this.isInitialized = false;
    this.supportedPaymentMethods = [
      "card",
      "mobilemoney", 
      "ussd",
      "banktransfer",
      "account",
      "mpesa",
      "googlepay",
      "applepay",
    ];

    // Debug logging for configuration
    console.log("üîß Flutterwave Service Configuration:");
    console.log("Public Key exists:", !!FLUTTERWAVE_PUBLIC_KEY);
    console.log("Encryption Key exists:", !!FLUTTERWAVE_ENCRYPTION_KEY);
    console.log(
      "Public Key format:",
      FLUTTERWAVE_PUBLIC_KEY?.substring(0, 20) + "..."
    );
  }

  /**
   * Initialize Flutterwave payment with proper authentication
   */
  async initializePayment(paymentData) {
    console.log("üöÄ Initializing Flutterwave payment...");

    if (!FLUTTERWAVE_PUBLIC_KEY || !FLUTTERWAVE_SECRET_KEY) {
      throw new Error("Flutterwave credentials not configured");
    }

    try {
      const payload = {
        tx_ref: this.generateTransactionReference(),
        amount: paymentData.amount,
        currency: paymentData.currency || "KES",
        redirect_url:
          paymentData.redirect_url ||
          window.location.origin + "/payment/callback",
        payment_options: paymentData.payment_options || "card,mobilemoney,ussd",
        customer: {
          email: paymentData.customer.email,
          phonenumber: paymentData.customer.phone,
          name: paymentData.customer.name,
        },
        customizations: {
          title: paymentData.title || "EduAI Premium Subscription",
          description:
            paymentData.description ||
            "Upgrade to EduAI Premium for unlimited AI tutoring",
          logo: paymentData.logo || "",
        },
        meta: {
          plan_id: paymentData.plan_id,
          user_id: paymentData.user_id,
          subscription_type: paymentData.subscription_type || "monthly",
        },
      };

      console.log("üì¶ Payment payload:", payload);

      const response = await this.makeAPIRequest("/payments", "POST", payload);

      if (response.status === "success") {
        console.log("‚úÖ Payment initialization successful");
        return {
          success: true,
          data: response.data,
          payment_link: response.data.link,
          tx_ref: payload.tx_ref,
        };
      } else {
        throw new Error(response.message || "Payment initialization failed");
      }
    } catch (error) {
      console.error("‚ùå Payment initialization failed:", error);
      throw error;
    }
  }

  /**
   * Process direct card payment using Flutterwave v4 API
   */
  async processCardPayment(cardData, paymentData) {
    console.log("üí≥ Processing card payment...");

    try {
      const payload = {
        tx_ref: this.generateTransactionReference(),
        amount: paymentData.amount,
        currency: paymentData.currency || "KES",
        email: paymentData.customer.email,
        phone_number: paymentData.customer.phone,
        fullname: paymentData.customer.name,
        card_number: cardData.number,
        cvv: cardData.cvv,
        expiry_month: cardData.expiry_month,
        expiry_year: cardData.expiry_year,
        redirect_url:
          paymentData.redirect_url ||
          window.location.origin + "/payment/callback",
        enckey: FLUTTERWAVE_ENCRYPTION_KEY,
        authorization: {
          mode: "pin",
          pin: cardData.pin,
        },
      };

      const response = await this.makeAPIRequest(
        "/charges?type=card",
        "POST",
        payload
      );

      if (response.status === "success") {
        return await this.handlePaymentResponse(response);
      } else {
        throw new Error(response.message || "Card payment failed");
      }
    } catch (error) {
      console.error("‚ùå Card payment failed:", error);
      throw error;
    }
  }

  /**
   * Process mobile money payment (M-Pesa, Airtel Money, etc.)
   */
  async processMobileMoneyPayment(mobileData, paymentData) {
    console.log("üì± Processing mobile money payment...");

    try {
      const payload = {
        tx_ref: this.generateTransactionReference(),
        amount: paymentData.amount,
        currency: paymentData.currency || "KES",
        email: paymentData.customer.email,
        phone_number: mobileData.phone_number,
        fullname: paymentData.customer.name,
        type: mobileData.type || "mpesa", // mpesa, airtelmoney, mtncameroon
        redirect_url:
          paymentData.redirect_url ||
          window.location.origin + "/payment/callback",
      };

      const response = await this.makeAPIRequest(
        "/charges?type=mobile_money_kenya",
        "POST",
        payload
      );

      if (response.status === "success") {
        return await this.handlePaymentResponse(response);
      } else {
        throw new Error(response.message || "Mobile money payment failed");
      }
    } catch (error) {
      console.error("‚ùå Mobile money payment failed:", error);
      throw error;
    }
  }

  /**
   * Verify payment transaction
   */
  async verifyPayment(transactionId) {
    console.log("üîç Verifying payment:", transactionId);

    try {
      const response = await this.makeAPIRequest(
        `/transactions/${transactionId}/verify`,
        "GET"
      );

      if (response.status === "success") {
        console.log("‚úÖ Payment verification successful");
        return {
          success: true,
          data: response.data,
          status: response.data.status,
          amount: response.data.amount,
          currency: response.data.currency,
          tx_ref: response.data.tx_ref,
        };
      } else {
        throw new Error(response.message || "Payment verification failed");
      }
    } catch (error) {
      console.error("‚ùå Payment verification failed:", error);
      throw error;
    }
  }

  /**
   * Handle payment response and required validations
   */
  async handlePaymentResponse(response) {
    if (response.data.status === "successful") {
      return {
        success: true,
        data: response.data,
        requires_verification: false,
      };
    } else if (response.data.status === "pending") {
      return {
        success: true,
        data: response.data,
        requires_verification: true,
        validation_required: response.data.processor_response,
      };
    } else {
      throw new Error(response.data.processor_response || "Payment failed");
    }
  }

  /**
   * Make authenticated API request to Flutterwave
   */
  async makeAPIRequest(endpoint, method = "GET", payload = null) {
    const url = `${FLUTTERWAVE_BASE_URL}${endpoint}`;

    const headers = {
      "Content-Type": "application/json",
      Authorization: `Bearer ${FLUTTERWAVE_SECRET_KEY}`,
      "User-Agent": "EduAI-Premium/1.0",
    };

    console.log(`üåê Making ${method} request to:`, endpoint);

    const options = {
      method,
      headers,
    };

    if (payload && method !== "GET") {
      options.body = JSON.stringify(payload);
    }

    const response = await fetch(url, options);
    const data = await response.json();

    if (!response.ok) {
      console.error("‚ùå API Error:", data);
      throw new Error(data.message || `API request failed: ${response.status}`);
    }

    return data;
  }

  /**
   * Generate unique transaction reference
   */
  generateTransactionReference() {
    const timestamp = Date.now();
    const random = Math.random().toString(36).substring(2, 8);
    return `eduai_${timestamp}_${random}`;
  }

  /**
   * Get supported payment methods for Kenya
   */
  getSupportedPaymentMethods() {
    return {
      card: {
        name: "Credit/Debit Card",
        description: "Visa, Mastercard, Verve",
        icon: "üí≥",
        currencies: ["KES", "USD", "EUR", "GBP"],
      },
      mobilemoney: {
        name: "Mobile Money",
        description: "M-Pesa, Airtel Money",
        icon: "üì±",
        currencies: ["KES"],
      },
      ussd: {
        name: "USSD",
        description: "Bank USSD codes",
        icon: "üìû",
        currencies: ["KES"],
      },
      banktransfer: {
        name: "Bank Transfer",
        description: "Direct bank transfer",
        icon: "üè¶",
        currencies: ["KES", "USD"],
      },
    };
  }

  /**
   * Format amount for display
   */
  formatAmount(amount, currency = "KES") {
    const formatter = new Intl.NumberFormat("en-KE", {
      style: "currency",
      currency: currency,
      minimumFractionDigits: 0,
    });
    return formatter.format(amount);
  }

  /**
   * Validate payment data
   */
  validatePaymentData(paymentData) {
    const required = ["amount", "customer"];
    const customerRequired = ["email", "phone", "name"];

    for (const field of required) {
      if (!paymentData[field]) {
        throw new Error(`Missing required field: ${field}`);
      }
    }

    for (const field of customerRequired) {
      if (!paymentData.customer[field]) {
        throw new Error(`Missing required customer field: ${field}`);
      }
    }

    if (paymentData.amount <= 0) {
      throw new Error("Amount must be greater than 0");
    }

    if (!this.isValidEmail(paymentData.customer.email)) {
      throw new Error("Invalid email address");
    }

    if (!this.isValidPhone(paymentData.customer.phone)) {
      throw new Error("Invalid phone number");
    }

    return true;
  }

  /**
   * Validate email format
   */
  isValidEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  }

  /**
   * Validate phone number format
   */
  isValidPhone(phone) {
    const phoneRegex = /^[+]?[1-9][\d]{7,14}$/;
    return phoneRegex.test(phone.replace(/\s+/g, ""));
  }

  /**
   * Get service status and configuration
   */
  getServiceStatus() {
    return {
      isConfigured: !!(FLUTTERWAVE_PUBLIC_KEY && FLUTTERWAVE_SECRET_KEY),
      publicKey: FLUTTERWAVE_PUBLIC_KEY?.substring(0, 20) + "...",
      encryptionKey: !!FLUTTERWAVE_ENCRYPTION_KEY,
      supportedMethods: this.supportedPaymentMethods,
      apiVersion: "v4",
    };
  }
}

// Create and export singleton instance
const flutterwaveService = new FlutterwaveService();
export default flutterwaveService;
